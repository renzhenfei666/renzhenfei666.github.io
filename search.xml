<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>追书神器 API 整理</title>
      <link href="/2019/08/22/zhui-shu-shen-qi-api-zheng-li/"/>
      <url>/2019/08/22/zhui-shu-shen-qi-api-zheng-li/</url>
      
        <content type="html"><![CDATA[<p>前段时间使用追书神器的api做了一个微信小程序，现将追书神器api总结在下方</p><a id="more"></a><h1 id="追书神器api文档"><a href="#追书神器api文档" class="headerlink" title="追书神器api文档"></a>追书神器api文档</h1><p>追书神器<code>api</code>官方地址:</p><pre><code>http://api.zhuishushenqi.comhttp://api05iye5.zhuishushenqi.comhttp://http://chapterup.zhuishushenqi.com/chapter</code></pre><ol><li>获取所有分类</li><li>获取排行榜类型</li><li>获取排行榜小说</li><li>获取分类下小类别</li><li>根据分类获取小说列表</li><li>获取小说信息</li><li>获取小说正版源</li><li>获取小说源(正版 ➕盗版)</li><li>获取小说章节(根据小说id)</li><li>获取小说章节(根据小说源id)</li><li>获取小说章节内容</li><li>获取搜索热词</li><li>搜索自动补充</li><li>模糊搜索</li><li>获取小说最新章节</li></ol><p><strong>所有接口都是GET请求</strong></p><h2 id="1-获取所有分类"><a href="#1-获取所有分类" class="headerlink" title="1. 获取所有分类"></a>1. 获取所有分类</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/cats/lv2/statistics</td></tr><tr><td>参数</td><td>null</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fcats%2Flv2%2Fstatistics" target="_blank" rel="noopener">api.zhuishushenqi.com/cats/lv2/st…</a></td></tr></tbody></table><h2 id="2-获取排行榜类型"><a href="#2-获取排行榜类型" class="headerlink" title="2. 获取排行榜类型"></a>2. 获取排行榜类型</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/ranking/gender</td></tr><tr><td>参数</td><td>null</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Franking%2Fgender" target="_blank" rel="noopener">api.zhuishushenqi.com/ranking/gen…</a></td></tr></tbody></table><h2 id="3-获取排行榜小说"><a href="#3-获取排行榜小说" class="headerlink" title="3. 获取排行榜小说"></a>3. 获取排行榜小说</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/ranking/:rankId</td></tr><tr><td>参数</td><td>排行榜的ID,不同字段对应不同的榜单,具体ID从接口2中获取</td></tr><tr><td></td><td>_id: 周榜ID</td></tr><tr><td></td><td>monthRank: 月榜ID</td></tr><tr><td></td><td>totalRank: 总榜ID</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Franking%2F54d43437d47d13ff21cad58b" target="_blank" rel="noopener">api.zhuishushenqi.com/ranking/54d…</a></td></tr></tbody></table><h2 id="4-获取分类下小类别"><a href="#4-获取分类下小类别" class="headerlink" title="4. 获取分类下小类别"></a>4. 获取分类下小类别</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/cats/lv2</td></tr><tr><td>参数</td><td>null</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fcats%2Flv2" target="_blank" rel="noopener">api.zhuishushenqi.com/cats/lv2</a></td></tr></tbody></table><h2 id="5-根据分类获取小说列表"><a href="#5-根据分类获取小说列表" class="headerlink" title="5. 根据分类获取小说列表"></a>5. 根据分类获取小说列表</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/book/by-categories</td></tr><tr><td>参数</td><td>说明无</td></tr><tr><td></td><td>gender: 男生:<code>mael</code> 女生:<code>female</code> 出版:<code>press</code></td></tr><tr><td></td><td>type: 热门:<code>hot</code> 新书:<code>new</code> 好评:<code>repulation</code> 完结: <code>over</code> 包月: <code>month</code></td></tr><tr><td></td><td>major: 大类别 从接口1获取</td></tr><tr><td></td><td>minor: 小类别 从接口4获取 (非必填)</td></tr><tr><td></td><td>start: 分页开始页</td></tr><tr><td></td><td>limit: 分页条数</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=https%3A%2F%2Fapi.zhuishushenqi.com%2Fbook%2Fby-categories%3Fgender%3Dmale%26type%3Dhot%26major%3D%E5%A5%87%E5%B9%BB%26minor%3D%26start%3D0%26limit%3D20" target="_blank" rel="noopener">api.zhuishushenqi.com/book/by-cat…</a></td></tr></tbody></table><h2 id="6-获取小说信息"><a href="#6-获取小说信息" class="headerlink" title="6. 获取小说信息"></a>6. 获取小说信息</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/book/:booId</td></tr><tr><td>参数</td><td>booId具体小说的ID</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fbook%2F548d9c17eb0337ee6df738f5" target="_blank" rel="noopener">api.zhuishushenqi.com/book/548d9c…</a></td></tr></tbody></table><h2 id="7-获取小说正版源"><a href="#7-获取小说正版源" class="headerlink" title="7. 获取小说正版源"></a>7. 获取小说正版源</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/btoc</td></tr><tr><td>参数</td><td>view: 暂时只知道<code>summary</code>这个参数 book: 对应的bookId</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fbtoc%3Fview%3Dsummary%26book%3D548d9c17eb0337ee6df738f5" target="_blank" rel="noopener">api.zhuishushenqi.com/btoc?view=s…</a></td></tr></tbody></table><h2 id="8-获取小说正版源于盗版源-混合"><a href="#8-获取小说正版源于盗版源-混合" class="headerlink" title="8. 获取小说正版源于盗版源(混合)"></a>8. 获取小说正版源于盗版源(混合)</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/atoc</td></tr><tr><td>参数</td><td><code>view</code>: 暂时只知道<code>summary</code>这个参数<code>book</code>: 对应的bookId</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fatoc%3Fview%3Dsummary%26book%3D548d9c17eb0337ee6df738f5" target="_blank" rel="noopener">api.zhuishushenqi.com/atoc?view=s…</a></td></tr></tbody></table><h2 id="9-获取小说章节-根据小说id"><a href="#9-获取小说章节-根据小说id" class="headerlink" title="9. 获取小说章节(根据小说id)"></a>9. 获取小说章节(根据小说id)</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/mix-atoc/:bookId</td></tr><tr><td>参数</td><td><code>bookId</code>:对应小说id <code>view</code>:暂时只知道<code>chapters</code></td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fmix-atoc%2F50bff3ec209793513100001c%3Fview%3Dchapters" target="_blank" rel="noopener">api.zhuishushenqi.com/mix-atoc/50…</a></td></tr></tbody></table><h2 id="10-获取小说章节-根据小说源id"><a href="#10-获取小说章节-根据小说源id" class="headerlink" title="10. 获取小说章节(根据小说源id)"></a>10. 获取小说章节(根据小说源id)</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>/atoc 或者/btoc</td></tr><tr><td>参数</td><td><code>sourceId</code>:对应小说源id <code>view</code>:暂时只知道`chapters</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fatoc%2F568fef99adb27bfb4b3a58dc%3Fview%3Dchapters" target="_blank" rel="noopener">api.zhuishushenqi.com/atoc/568fef…</a></td></tr></tbody></table><h2 id="11-获取小说章节内容"><a href="#11-获取小说章节内容" class="headerlink" title="11. 获取小说章节内容"></a>11. 获取小说章节内容</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口地址</td><td>chapterup.zhuishushenqi.com/chapter/</td></tr><tr><td>参数</td><td>link: 章节地址</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fchapterup.zhuishushenqi.com%2Fchapter%2Fhttp%3A%2F%2Fvip.zhuishushenqi.com%2Fchapter%2F5817f1161bb2ca566b0a5973%3Fcv%3D1481275033588" target="_blank" rel="noopener">chapterup.zhuishushenqi.com/chapter/htt…</a></td></tr></tbody></table><h2 id="12-获取搜索热词"><a href="#12-获取搜索热词" class="headerlink" title="12. 获取搜索热词"></a>12. 获取搜索热词</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口</td><td>/book/search-hotwords</td></tr><tr><td>参数</td><td>null</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fbook%2Fsearch-hotword" target="_blank" rel="noopener">api.zhuishushenqi.com/book/search…</a></td></tr></tbody></table><h2 id="13-搜索自动补充"><a href="#13-搜索自动补充" class="headerlink" title="13. 搜索自动补充"></a>13. 搜索自动补充</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口</td><td>/book/auto-complete</td></tr><tr><td>参数</td><td><code>query</code>:查询值</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fbook%2Fauto-complete%3Fquery%3D%E6%96%97%E7%BD%97" target="_blank" rel="noopener">api.zhuishushenqi.com/book/auto-c…</a></td></tr></tbody></table><h2 id="14-模糊搜索"><a href="#14-模糊搜索" class="headerlink" title="14. 模糊搜索"></a>14. 模糊搜索</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口</td><td>/book/fuzzy-search</td></tr><tr><td>参数</td><td><code>query</code>:查询值</td></tr><tr><td>实例地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi.zhuishushenqi.com%2Fbook%2Ffuzzy-search%3Fquery%3D%E6%96%97%E7%BD%97" target="_blank" rel="noopener">api.zhuishushenqi.com/book/fuzzy-…</a></td></tr></tbody></table><h2 id="15-获取小说最新章节"><a href="#15-获取小说最新章节" class="headerlink" title="15. 获取小说最新章节"></a>15. 获取小说最新章节</h2><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>接口</td><td>/book</td></tr><tr><td>参数</td><td><code>view</code>: updated <code>id</code>:以都好分割的bookId</td></tr><tr><td>实例接口地址</td><td><a href="https://link.juejin.im/?target=http%3A%2F%2Fapi05iye5.zhuishushenqi.com%2Fbook%3Fview%3Dupdated%26id%3D531169b3173bfacb4904ca67" target="_blank" rel="noopener">api05iye5.zhuishushenqi.com/book?view=u…</a></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见问题汇总</title>
      <link href="/2019/08/22/mian-shi-ti/"/>
      <url>/2019/08/22/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><h2 id="1、盒模型"><a href="#1、盒模型" class="headerlink" title="1、盒模型"></a>1、盒模型</h2><p><a href="https://www.cnblogs.com/smyhvae/p/8512617.html" target="_blank" rel="noopener">https://www.cnblogs.com/smyhvae/p/8512617.html</a></p><p><a href="https://segmentfault.com/a/1190000013069516" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013069516</a></p><h2 id="2、flex"><a href="#2、flex" class="headerlink" title="2、flex"></a>2、flex</h2><p><a href="https://juejin.im/entry/58f6e7d3a0bb9f006ab54af9" target="_blank" rel="noopener">https://juejin.im/entry/58f6e7d3a0bb9f006ab54af9</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox</a></p><p><a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25303493</a></p><p><a href="https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/</a></p><a id="more"></a><h2 id="3、css单位"><a href="#3、css单位" class="headerlink" title="3、css单位"></a>3、css单位</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Values_and_units" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Values_and_units</a></p><h2 id="4、css选择器"><a href="#4、css选择器" class="headerlink" title="4、css选择器"></a>4、css选择器</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Selectors" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Selectors</a></p><h2 id="5、bfc-清除浮动"><a href="#5、bfc-清除浮动" class="headerlink" title="5、bfc 清除浮动"></a>5、bfc 清除浮动</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></p><h2 id="6、层叠上下文"><a href="#6、层叠上下文" class="headerlink" title="6、层叠上下文"></a>6、层叠上下文</h2><p><a href="https://juejin.im/entry/5b877692f265da432008a5f9" target="_blank" rel="noopener">https://juejin.im/entry/5b877692f265da432008a5f9</a></p><h2 id="7、常见页面布局"><a href="#7、常见页面布局" class="headerlink" title="7、常见页面布局"></a>7、常见页面布局</h2><p><a href="https://juejin.im/entry/5aa7246ff265da239f070791" target="_blank" rel="noopener">https://juejin.im/entry/5aa7246ff265da239f070791</a></p><h2 id="8、响应式布局"><a href="#8、响应式布局" class="headerlink" title="8、响应式布局"></a>8、响应式布局</h2><p><a href="https://juejin.im/entry/5caaa4a6e51d452b230d6129" target="_blank" rel="noopener">https://juejin.im/entry/5caaa4a6e51d452b230d6129</a></p><h2 id="9、css预处理，后处理"><a href="#9、css预处理，后处理" class="headerlink" title="9、css预处理，后处理"></a>9、css预处理，后处理</h2><p><a href="https://blog.csdn.net/yushuangyushuang/article/details/79209752" target="_blank" rel="noopener">https://blog.csdn.net/yushuangyushuang/article/details/79209752</a></p><h2 id="10、css3新特性"><a href="#10、css3新特性" class="headerlink" title="10、css3新特性"></a>10、css3新特性</h2><p><a href="https://blog.csdn.net/pcaxb/article/details/87251949" target="_blank" rel="noopener">https://blog.csdn.net/pcaxb/article/details/87251949</a></p><p><a href="https://juejin.im/entry/595f1e3c5188250d914dd53c" target="_blank" rel="noopener">https://juejin.im/entry/595f1e3c5188250d914dd53c</a></p><p>animation和transiton的相关属性</p><p>animate和translate</p><p><a href="https://juejin.im/entry/5b137f2f5188257d3a69659d" target="_blank" rel="noopener">https://juejin.im/entry/5b137f2f5188257d3a69659d</a></p><h2 id="11、display哪些取值"><a href="#11、display哪些取值" class="headerlink" title="11、display哪些取值"></a>11、display哪些取值</h2><p>position<br>    1、position属性取值：static(默认)、relative、absolute、fixed、inherit。<br>    2、postision：static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。<br>    3、除了static值，在其他三个值的设置下，z-index才会起作用。（确切地说z-index只在定位元素上有效）<br>    4、position：relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。<br>    5、position：fixed 旧版本IE不支持，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。<br>    6、position：inherit。规定从父类继承position属性的值。但是任何版本的IE都不支持该属性值。</p><pre><code>display1、display属性取值：none、inline、inline-block、block、flex、inherit。2、display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框。3、display：none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。4、display：inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。5、inline-block就介于两者之间。6、display: flex 意为"弹性盒布局模型"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为flex布局。设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用flex布局的元素，称为flex容器。它的所有子元素自动成为容器成员，称为flex项目（flex item）。容器的属性：以下6个属性设置在容器上。    flex-direction    决定主轴的方向（项目的排列方向）。        row（默认值）：主轴为水平方向，起点在左端。        row-reverse：主轴为水平方向，起点在右端。        column：主轴为垂直方向，起点在上沿。        column-reverse：主轴为垂直方向，起点在下沿。    flex-wrap   默认情况下，项目都排在一条线上。flex-wrap属性定义，如果一条轴线排不下，如何换行。        nowrap（默认）：不换行。        wrap：换行，第一行在上方。        wrap-reverse：换行，第一行在下方。    flex-flow   flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。    justify-content     定义了项目在主轴上的对齐方式。假设主轴为从左到右。        flex-start（默认值）：左对齐        flex-end：右对齐        center： 居中        space-between：两端对齐，项目之间的间隔都相等。        space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。    align-items     定义项目在交叉轴上如何对齐。假设交叉轴从上到下。        flex-start：交叉轴的起点对齐。        flex-end：交叉轴的终点对齐。        center：交叉轴的中点对齐。        baseline: 项目的第一行文字的基线对齐。        stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。    align-content   义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。        flex-start：与交叉轴的起点对齐。        flex-end：与交叉轴的终点对齐。        center：与交叉轴的中点对齐。        space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。        space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。        stretch（默认值）：轴线占满整个交叉轴。项目的属性：以下6个属性设置在项目上。    order           定义项目的排列顺序。数值越小，排列越靠前，默认为0。    flex-grow       定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。    flex-shrink     定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。    flex-basis      定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。    flex        flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性    align-self      align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</code></pre><h2 id="12、相邻的两个inline-block节点为什么会出现间隔，该如何解决"><a href="#12、相邻的两个inline-block节点为什么会出现间隔，该如何解决" class="headerlink" title="12、相邻的两个inline-block节点为什么会出现间隔，该如何解决"></a>12、相邻的两个inline-block节点为什么会出现间隔，该如何解决</h2><p><a href="https://www.jianshu.com/p/b6fb427308ad" target="_blank" rel="noopener">https://www.jianshu.com/p/b6fb427308ad</a></p><h2 id="13、meta-viewport-移动端适配"><a href="#13、meta-viewport-移动端适配" class="headerlink" title="13、meta viewport 移动端适配"></a>13、meta viewport 移动端适配</h2><p><a href="https://juejin.im/post/5bfa99e0e51d4555557d26c6" target="_blank" rel="noopener">https://juejin.im/post/5bfa99e0e51d4555557d26c6</a></p><h2 id="14、CSS实现宽度自适应100-，宽高16-9的比例的矩形"><a href="#14、CSS实现宽度自适应100-，宽高16-9的比例的矩形" class="headerlink" title="14、CSS实现宽度自适应100%，宽高16:9的比例的矩形"></a>14、CSS实现宽度自适应100%，宽高16:9的比例的矩形</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* scale 用来实现宽高等比例 1:1 padding-bottom:100%; 4:3 padding-bottom:75%; 16:9 padding-bottom:56.25%; */</span><span class="token selector"><span class="token class">.scale</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">56.25%</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* item 用来放置全部的子元素 */</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">}</span></code></pre><h2 id="15、rem布局的优缺点"><a href="#15、rem布局的优缺点" class="headerlink" title="15、rem布局的优缺点"></a>15、rem布局的优缺点</h2><p><a href="https://blog.csdn.net/qq_36263601/article/details/78366710" target="_blank" rel="noopener">https://blog.csdn.net/qq_36263601/article/details/78366710</a></p><p><a href="https://www.zhihu.com/question/37179916" target="_blank" rel="noopener">https://www.zhihu.com/question/37179916</a></p><h2 id="16、画三角形"><a href="#16、画三角形" class="headerlink" title="16、画三角形"></a>16、画三角形</h2><p>正三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-up</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>倒正三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-down</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>正左三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>正右三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直角左上三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-topleft</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直角右上三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-topright</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>直角左下三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-bottomleft</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直角右下三角形</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#triangle-bottomright</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="17、1像素边框问题"><a href="#17、1像素边框问题" class="headerlink" title="17、1像素边框问题"></a>17、1像素边框问题</h2><p><a href="https://blog.csdn.net/xuexizhe88/article/details/80566552" target="_blank" rel="noopener">https://blog.csdn.net/xuexizhe88/article/details/80566552</a></p><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="1、语义化"><a href="#1、语义化" class="headerlink" title="1、语义化"></a>1、语义化</h2><p><a href="https://www.jianshu.com/p/6bc1fc059b51" target="_blank" rel="noopener">https://www.jianshu.com/p/6bc1fc059b51</a></p><h2 id="2、新标签新特性"><a href="#2、新标签新特性" class="headerlink" title="2、新标签新特性"></a>2、新标签新特性</h2><p><a href="https://juejin.im/post/5b9f76235188255c652d3212" target="_blank" rel="noopener">https://juejin.im/post/5b9f76235188255c652d3212</a></p><h2 id="3、input和textarea的区别"><a href="#3、input和textarea的区别" class="headerlink" title="3、input和textarea的区别"></a>3、input和textarea的区别</h2><p><a href="https://www.jianshu.com/p/a72bb81703b7" target="_blank" rel="noopener">https://www.jianshu.com/p/a72bb81703b7</a></p><h2 id="4、用一个div模拟textarea的实现"><a href="#4、用一个div模拟textarea的实现" class="headerlink" title="4、用一个div模拟textarea的实现"></a>4、用一个div模拟textarea的实现</h2><p>内容可编辑 contenteditable</p><p>​    对就是contenteditable，给div添加contenteditable=true即可</p><h2 id="5、移动设备忽略将页面中的数字识别为电话号码的方法"><a href="#5、移动设备忽略将页面中的数字识别为电话号码的方法" class="headerlink" title="5、移动设备忽略将页面中的数字识别为电话号码的方法"></a>5、移动设备忽略将页面中的数字识别为电话号码的方法</h2><p><a href="https://blog.csdn.net/shuidinaozhongyan/article/details/73194556" target="_blank" rel="noopener">https://blog.csdn.net/shuidinaozhongyan/article/details/73194556</a></p><h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><h2 id="1、原型-原型链-构造函数-实例-继承"><a href="#1、原型-原型链-构造函数-实例-继承" class="headerlink" title="1、原型/原型链/构造函数/实例/继承"></a>1、原型/原型链/构造函数/实例/继承</h2><p><a href="https://juejin.im/post/5c6fc5b3e51d457750607cdb" target="_blank" rel="noopener">https://juejin.im/post/5c6fc5b3e51d457750607cdb</a></p><p><a href="https://blog.csdn.net/SpicyBoiledFish/article/details/71123162" target="_blank" rel="noopener">https://blog.csdn.net/SpicyBoiledFish/article/details/71123162</a></p><p><a href="https://segmentfault.com/a/1190000018524727" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018524727</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/2</a></p><h2 id="2、有几种方式可以实现继承"><a href="#2、有几种方式可以实现继承" class="headerlink" title="2、有几种方式可以实现继承"></a>2、有几种方式可以实现继承</h2><p><a href="https://segmentfault.com/a/1190000016708006" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016708006</a></p><h2 id="3、用原型实现继承有什么缺点，怎么解决"><a href="#3、用原型实现继承有什么缺点，怎么解决" class="headerlink" title="3、用原型实现继承有什么缺点，怎么解决"></a>3、用原型实现继承有什么缺点，怎么解决</h2><p><a href="https://segmentfault.com/a/1190000011151188" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011151188</a></p><p><a href="https://juejin.im/post/5ccff45a51882541b07a9e3d" target="_blank" rel="noopener">https://juejin.im/post/5ccff45a51882541b07a9e3d</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/16" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/16</a></p><h2 id="4、arguments"><a href="#4、arguments" class="headerlink" title="4、arguments"></a>4、arguments</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments</a></p><p><a href="https://juejin.im/entry/5903018cac502e0063d92127" target="_blank" rel="noopener">https://juejin.im/entry/5903018cac502e0063d92127</a></p><p><a href="https://blog.csdn.net/qq_16339527/article/details/53231725" target="_blank" rel="noopener">https://blog.csdn.net/qq_16339527/article/details/53231725</a></p><h2 id="5、数据类型判断"><a href="#5、数据类型判断" class="headerlink" title="5、数据类型判断"></a>5、数据类型判断</h2><p><a href="https://segmentfault.com/a/1190000015264821" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015264821</a></p><p><a href="https://juejin.im/entry/5964a1c15188250d8b65ef5f" target="_blank" rel="noopener">https://juejin.im/entry/5964a1c15188250d8b65ef5f</a></p><h2 id="6、作用域链、闭包、作用域"><a href="#6、作用域链、闭包、作用域" class="headerlink" title="6、作用域链、闭包、作用域"></a>6、作用域链、闭包、作用域</h2><p><a href="https://juejin.im/post/5bf3baaae51d4548d14fb5d1" target="_blank" rel="noopener">https://juejin.im/post/5bf3baaae51d4548d14fb5d1</a></p><p><a href="https://github.com/dwqs/blog/issues/18" target="_blank" rel="noopener">https://github.com/dwqs/blog/issues/18</a></p><h2 id="7、Ajax的原生写法"><a href="#7、Ajax的原生写法" class="headerlink" title="7、Ajax的原生写法"></a>7、Ajax的原生写法</h2><p><a href="https://www.jianshu.com/p/2be2e4f1fc8e" target="_blank" rel="noopener">https://www.jianshu.com/p/2be2e4f1fc8e</a></p><p><a href="https://github.com/nodejh/nodejh.github.io/issues/15" target="_blank" rel="noopener">https://github.com/nodejh/nodejh.github.io/issues/15</a></p><h2 id="8、对象深拷贝、浅拷贝"><a href="#8、对象深拷贝、浅拷贝" class="headerlink" title="8、对象深拷贝、浅拷贝"></a>8、对象深拷贝、浅拷贝</h2><p><a href="https://juejin.im/post/5c26dd8fe51d4570c053e08b" target="_blank" rel="noopener">https://juejin.im/post/5c26dd8fe51d4570c053e08b</a></p><h2 id="9、图片懒加载、预加载"><a href="#9、图片懒加载、预加载" class="headerlink" title="9、图片懒加载、预加载"></a>9、图片懒加载、预加载</h2><p><a href="https://juejin.im/post/5b0c3b53f265da09253cbed0" target="_blank" rel="noopener">https://juejin.im/post/5b0c3b53f265da09253cbed0</a></p><h2 id="10、实现页面加载进度条"><a href="#10、实现页面加载进度条" class="headerlink" title="10、实现页面加载进度条"></a>10、实现页面加载进度条</h2><p><a href="https://juejin.im/post/5b31e07ef265da599c56165a" target="_blank" rel="noopener">https://juejin.im/post/5b31e07ef265da599c56165a</a></p><h2 id="11、this关键字"><a href="#11、this关键字" class="headerlink" title="11、this关键字"></a>11、this关键字</h2><p><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">https://juejin.im/post/59bfe84351882531b730bac2</a></p><h2 id="12、函数式编程"><a href="#12、函数式编程" class="headerlink" title="12、函数式编程"></a>12、函数式编程</h2><p><a href="https://juejin.im/post/5b4ac0d0f265da0fa959a785" target="_blank" rel="noopener">https://juejin.im/post/5b4ac0d0f265da0fa959a785</a></p><p><a href="https://juejin.im/post/5c19c3ffe51d45059b632eef" target="_blank" rel="noopener">https://juejin.im/post/5c19c3ffe51d45059b632eef</a></p><h2 id="13、手动实现parseInt"><a href="#13、手动实现parseInt" class="headerlink" title="13、手动实现parseInt"></a>13、手动实现parseInt</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">l</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********/</span><span class="token keyword">function</span> <span class="token function">_parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>radix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">!=</span><span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> str <span class="token operator">!=</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">=</span><span class="token function">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// l(str)</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>radix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> radix <span class="token operator">!==</span><span class="token string">"number"</span> <span class="token operator">||</span> radix <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> radix <span class="token operator">></span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">l</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span>        <span class="token function">l</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>radix<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">l</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">_parseInt</span><span class="token punctuation">(</span><span class="token string">"654646"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="14、为什么会有同源策略"><a href="#14、为什么会有同源策略" class="headerlink" title="14、为什么会有同源策略"></a>14、为什么会有同源策略</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></p><p><a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015597029</a></p><h2 id="15、怎么判断两个对象是否相等"><a href="#15、怎么判断两个对象是否相等" class="headerlink" title="15、怎么判断两个对象是否相等"></a>15、怎么判断两个对象是否相等</h2><p><a href="https://juejin.im/post/5c948c41e51d451606692b30" target="_blank" rel="noopener">https://juejin.im/post/5c948c41e51d451606692b30</a></p><h2 id="16、事件模型"><a href="#16、事件模型" class="headerlink" title="16、事件模型"></a>16、事件模型</h2><p>事件委托、代理</p><p><a href="https://blog.lbinin.com/frontEnd/JavaScript/JS-Event-Binding.html" target="_blank" rel="noopener">https://blog.lbinin.com/frontEnd/JavaScript/JS-Event-Binding.html</a></p><p><a href="https://javascript.ruanyifeng.com/dom/event.html" target="_blank" rel="noopener">https://javascript.ruanyifeng.com/dom/event.html</a></p><p><a href="https://www.jianshu.com/p/d867121ec167" target="_blank" rel="noopener">https://www.jianshu.com/p/d867121ec167</a></p><p>如何让事件先冒泡后捕获</p><h2 id="17、window的onload事件和domcontentloaded"><a href="#17、window的onload事件和domcontentloaded" class="headerlink" title="17、window的onload事件和domcontentloaded"></a>17、window的onload事件和domcontentloaded</h2><p><a href="https://www.cnblogs.com/hh54188/archive/2013/03/01/2939426.html" target="_blank" rel="noopener">https://www.cnblogs.com/hh54188/archive/2013/03/01/2939426.html</a></p><h2 id="18、for…in迭代和for…of有什么区别"><a href="#18、for…in迭代和for…of有什么区别" class="headerlink" title="18、for…in迭代和for…of有什么区别"></a>18、for…in迭代和for…of有什么区别</h2><p><a href="https://juejin.im/post/5aea83c86fb9a07aae15013b" target="_blank" rel="noopener">https://juejin.im/post/5aea83c86fb9a07aae15013b</a></p><h2 id="19、函数柯里化"><a href="#19、函数柯里化" class="headerlink" title="19、函数柯里化"></a>19、函数柯里化</h2><p><a href="https://juejin.im/post/5d2299faf265da1bb67a3b65" target="_blank" rel="noopener">https://juejin.im/post/5d2299faf265da1bb67a3b65</a></p><h2 id="20、call-apply区别，原生实现bind"><a href="#20、call-apply区别，原生实现bind" class="headerlink" title="20、call apply区别，原生实现bind"></a>20、call apply区别，原生实现bind</h2><p>call，apply，bind 三者用法和区别：角度可为参数、绑定规则（显示绑定和强绑定），运行效率、运行情况。</p><p><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">https://juejin.im/post/59bfe84351882531b730bac2</a></p><p><a href="https://juejin.im/post/57dc97f35bbb50005e5b39bd" target="_blank" rel="noopener">https://juejin.im/post/57dc97f35bbb50005e5b39bd</a></p><h2 id="21、async-await"><a href="#21、async-await" class="headerlink" title="21、async/await"></a>21、async/await</h2><p><a href="https://juejin.im/post/5a9516885188257a6b061d72" target="_blank" rel="noopener">https://juejin.im/post/5a9516885188257a6b061d72</a></p><h2 id="22、立即执行函数和使用场景"><a href="#22、立即执行函数和使用场景" class="headerlink" title="22、立即执行函数和使用场景"></a>22、立即执行函数和使用场景</h2><p><a href="https://juejin.im/post/5d11e667e51d4510aa01152b" target="_blank" rel="noopener">https://juejin.im/post/5d11e667e51d4510aa01152b</a></p><p><a href="https://juejin.im/post/59fc0a8c6fb9a04500026707" target="_blank" rel="noopener">https://juejin.im/post/59fc0a8c6fb9a04500026707</a></p><h2 id="23、设计模式-要求说出如何实现-应用-优缺点-单例模式实现"><a href="#23、设计模式-要求说出如何实现-应用-优缺点-单例模式实现" class="headerlink" title="23、设计模式(要求说出如何实现,应用,优缺点)/单例模式实现"></a>23、设计模式(要求说出如何实现,应用,优缺点)/单例模式实现</h2><p><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">https://juejin.im/post/59df4f74f265da430f311909</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">https://juejin.im/post/5afe6430518825428630bc4d</a></p><h2 id="24、iframe的缺点有哪些"><a href="#24、iframe的缺点有哪些" class="headerlink" title="24、iframe的缺点有哪些"></a>24、iframe的缺点有哪些</h2><p><a href="https://blog.csdn.net/yintianqin/article/details/72625785" target="_blank" rel="noopener">https://blog.csdn.net/yintianqin/article/details/72625785</a></p><p><strong>iframe的优点：</strong><br>1.iframe能够原封不动的把嵌入的网页展现出来。<br>2.如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。<br>3.网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。<br>4.如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。<br><strong>iframe的缺点：</strong><br>1.会产生很多页面，<code>不容易管理</code>。<br>2.iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，<code>用户体验度差</code>。<br>3.代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会<code>不利于搜索引擎优化</code>。<br>4.很多的移动设备（PDA手机）无法完全显示框架，<code>设备兼容性</code>差。<br>5.iframe框架页面会<code>增加服务器的http请求</code>，对于大型网站是不可取的。<br>分析了这么多，<code>现在基本上都是用Ajax来代替iframe，所以iframe已经渐渐的退出了前端开发</code>。</p><h2 id="25、数组问题"><a href="#25、数组问题" class="headerlink" title="25、数组问题"></a>25、数组问题</h2><p>数组去重</p><p><a href="https://juejin.im/post/5b0284ac51882542ad774c45" target="_blank" rel="noopener">https://juejin.im/post/5b0284ac51882542ad774c45</a></p><p><a href="https://juejin.im/post/5949d85f61ff4b006c0de98b" target="_blank" rel="noopener">https://juejin.im/post/5949d85f61ff4b006c0de98b</a></p><p>数组常用方法</p><p><a href="https://juejin.im/post/5b0903b26fb9a07a9d70c7e0" target="_blank" rel="noopener">https://juejin.im/post/5b0903b26fb9a07a9d70c7e0</a></p><p><a href="https://juejin.im/entry/59ad2cacf265da248a7aa6cc" target="_blank" rel="noopener">https://juejin.im/entry/59ad2cacf265da248a7aa6cc</a></p><p>查找数组重复项</p><p><a href="https://blog.csdn.net/jayhkw/article/details/61916379" target="_blank" rel="noopener">https://blog.csdn.net/jayhkw/article/details/61916379</a></p><p>扁平化数组</p><p><a href="https://github.com/mqyqingfeng/Blog/issues/36" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/36</a></p><p>按数组中各项和特定值差值排序</p><p><a href="http://louiszhai.github.io/2016/12/23/sort/" target="_blank" rel="noopener">http://louiszhai.github.io/2016/12/23/sort/</a></p><h2 id="26、BOM属性对象方法"><a href="#26、BOM属性对象方法" class="headerlink" title="26、BOM属性对象方法"></a>26、BOM属性对象方法</h2><p><a href="https://www.cnblogs.com/leftJS/p/11070006.html" target="_blank" rel="noopener">https://www.cnblogs.com/leftJS/p/11070006.html</a></p><p><a href="https://blog.csdn.net/williamgavin/article/details/79143822" target="_blank" rel="noopener">https://blog.csdn.net/williamgavin/article/details/79143822</a></p><h2 id="27、服务端渲染"><a href="#27、服务端渲染" class="headerlink" title="27、服务端渲染"></a>27、服务端渲染</h2><p><a href="https://juejin.im/post/5c068fd8f265da61524d2abc" target="_blank" rel="noopener">https://juejin.im/post/5c068fd8f265da61524d2abc</a></p><h2 id="28、垃圾回收机制"><a href="#28、垃圾回收机制" class="headerlink" title="28、垃圾回收机制"></a>28、垃圾回收机制</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management</a></p><h2 id="29、eventloop"><a href="#29、eventloop" class="headerlink" title="29、eventloop"></a>29、eventloop</h2><p>进程和线程</p><p>任务队列</p><p><a href="https://juejin.im/post/5c9a43175188252d876e5903" target="_blank" rel="noopener">https://juejin.im/post/5c9a43175188252d876e5903</a></p><p><a href="https://juejin.im/post/5bfd5ebd6fb9a049dc01f070" target="_blank" rel="noopener">https://juejin.im/post/5bfd5ebd6fb9a049dc01f070</a></p><h2 id="30、如何快速让字符串变成已千为精度的数字"><a href="#30、如何快速让字符串变成已千为精度的数字" class="headerlink" title="30、如何快速让字符串变成已千为精度的数字"></a>30、如何快速让字符串变成已千为精度的数字</h2><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="1、声明-let、const"><a href="#1、声明-let、const" class="headerlink" title="1、声明 let、const"></a>1、声明 let、const</h2><h2 id="2、解构赋值"><a href="#2、解构赋值" class="headerlink" title="2、解构赋值"></a>2、解构赋值</h2><h2 id="3、声明类与继承：class、extend"><a href="#3、声明类与继承：class、extend" class="headerlink" title="3、声明类与继承：class、extend"></a>3、声明类与继承：class、extend</h2><h2 id="4、Promise的使用与实现"><a href="#4、Promise的使用与实现" class="headerlink" title="4、Promise的使用与实现"></a>4、Promise的使用与实现</h2><h2 id="5、generator（异步编程、yield、next-、await-、async）"><a href="#5、generator（异步编程、yield、next-、await-、async）" class="headerlink" title="5、generator（异步编程、yield、next()、await 、async）"></a>5、generator（异步编程、yield、next()、await 、async）</h2><h2 id="6、箭头函数this指向问题、拓展运算符"><a href="#6、箭头函数this指向问题、拓展运算符" class="headerlink" title="6、箭头函数this指向问题、拓展运算符"></a>6、箭头函数this指向问题、拓展运算符</h2><h2 id="7、map和set有没有用过，如何实现一个数组去重，map数据结构有什么优点？"><a href="#7、map和set有没有用过，如何实现一个数组去重，map数据结构有什么优点？" class="headerlink" title="7、map和set有没有用过，如何实现一个数组去重，map数据结构有什么优点？"></a>7、map和set有没有用过，如何实现一个数组去重，map数据结构有什么优点？</h2><h2 id="8、ES6怎么编译成ES5-css-loader原理-过程"><a href="#8、ES6怎么编译成ES5-css-loader原理-过程" class="headerlink" title="8、ES6怎么编译成ES5,css-loader原理,过程"></a>8、ES6怎么编译成ES5,css-loader原理,过程</h2><h2 id="9、ES6转成ES5的常见例子"><a href="#9、ES6转成ES5的常见例子" class="headerlink" title="9、ES6转成ES5的常见例子"></a>9、ES6转成ES5的常见例子</h2><p>使用es5实现es6的class</p><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="1、输入url到展示页面过程发生了什么？"><a href="#1、输入url到展示页面过程发生了什么？" class="headerlink" title="1、输入url到展示页面过程发生了什么？"></a>1、输入url到展示页面过程发生了什么？</h2><p><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013522717</a></p><h2 id="2、重绘与回流"><a href="#2、重绘与回流" class="headerlink" title="2、重绘与回流"></a>2、重绘与回流</h2><p>重绘(repaint): 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 损耗较少</p><p>回流(reflow): 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:</p><p>页面初次渲染</p><p>浏览器窗口大小改变</p><p>元素尺寸、位置、内容发生改变</p><p>元素字体大小变化</p><p>添加或者删除可见的 dom 元素</p><p>激活 CSS 伪类（例如：:hover）</p><p>查询某些属性或调用某些方法</p><p>clientWidth、clientHeight、clientTop、clientLeft</p><p>offsetWidth、offsetHeight、offsetTop、offsetLeft</p><p>scrollWidth、scrollHeight、scrollTop、scrollLeft</p><p>getComputedStyle()</p><p>getBoundingClientRect()</p><p>scrollTo()<br>回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高。</p><h2 id="3、防抖与节流"><a href="#3、防抖与节流" class="headerlink" title="3、防抖与节流"></a>3、防抖与节流</h2><p><a href="https://juejin.im/post/5c87b54ce51d455f7943dddb" target="_blank" rel="noopener">https://juejin.im/post/5c87b54ce51d455f7943dddb</a></p><h2 id="4、cookies、session、sessionStorage、localStorage"><a href="#4、cookies、session、sessionStorage、localStorage" class="headerlink" title="4、cookies、session、sessionStorage、localStorage"></a>4、cookies、session、sessionStorage、localStorage</h2><p><a href="https://juejin.im/post/5caac97c5188251169093efe" target="_blank" rel="noopener">https://juejin.im/post/5caac97c5188251169093efe</a></p><h2 id="5、浏览器内核"><a href="#5、浏览器内核" class="headerlink" title="5、浏览器内核"></a>5、浏览器内核</h2><p><a href="https://juejin.im/entry/57ff3cea0e3dd90057e5f25e" target="_blank" rel="noopener">https://juejin.im/entry/57ff3cea0e3dd90057e5f25e</a></p><h1 id="服务端与网络"><a href="#服务端与网络" class="headerlink" title="服务端与网络"></a>服务端与网络</h1><h2 id="1、常见状态码"><a href="#1、常见状态码" class="headerlink" title="1、常见状态码"></a>1、常见状态码</h2><p><a href="https://blog.csdn.net/q1056843325/article/details/53147180" target="_blank" rel="noopener">https://blog.csdn.net/q1056843325/article/details/53147180</a></p><h2 id="2、缓存"><a href="#2、缓存" class="headerlink" title="2、缓存"></a>2、缓存</h2><p>200 From cache和200 ok</p><p>400,401,403状态码分别代表什么</p><p>浏览器缓存</p><h2 id="3、cookie-session-token"><a href="#3、cookie-session-token" class="headerlink" title="3、cookie, session, token"></a>3、cookie, session, token</h2><h2 id="4、前端持久化的方式、区别"><a href="#4、前端持久化的方式、区别" class="headerlink" title="4、前端持久化的方式、区别"></a>4、前端持久化的方式、区别</h2><p><a href="https://juejin.im/post/5a7e92696fb9a06336114aca" target="_blank" rel="noopener">https://juejin.im/post/5a7e92696fb9a06336114aca</a></p><h2 id="5、DNS是怎么解析的"><a href="#5、DNS是怎么解析的" class="headerlink" title="5、DNS是怎么解析的"></a>5、DNS是怎么解析的</h2><p><a href="https://www.cnblogs.com/gopark/p/8430916.html" target="_blank" rel="noopener">https://www.cnblogs.com/gopark/p/8430916.html</a></p><h2 id="6、cdn"><a href="#6、cdn" class="headerlink" title="6、cdn"></a>6、cdn</h2><h2 id="7、计算机网络的相关协议"><a href="#7、计算机网络的相关协议" class="headerlink" title="7、计算机网络的相关协议"></a>7、计算机网络的相关协议</h2><h2 id="8、http-https-http2-0"><a href="#8、http-https-http2-0" class="headerlink" title="8、http/https/http2.0"></a>8、http/https/http2.0</h2><h2 id="9、get-post区别"><a href="#9、get-post区别" class="headerlink" title="9、get post区别"></a>9、get post区别</h2><h2 id="10、ajax、-axios库"><a href="#10、ajax、-axios库" class="headerlink" title="10、ajax、 axios库"></a>10、ajax、 axios库</h2><h2 id="11、tcp三次握手，四次挥手流程"><a href="#11、tcp三次握手，四次挥手流程" class="headerlink" title="11、tcp三次握手，四次挥手流程"></a>11、tcp三次握手，四次挥手流程</h2><h2 id="12、跨域"><a href="#12、跨域" class="headerlink" title="12、跨域"></a>12、跨域</h2><h2 id="13、前端安全XSS、CSRF"><a href="#13、前端安全XSS、CSRF" class="headerlink" title="13、前端安全XSS、CSRF"></a>13、前端安全XSS、CSRF</h2><h2 id="14、websocket"><a href="#14、websocket" class="headerlink" title="14、websocket"></a>14、websocket</h2><h2 id="15、Http请求中的keep-alive有了解吗"><a href="#15、Http请求中的keep-alive有了解吗" class="headerlink" title="15、Http请求中的keep-alive有了解吗"></a>15、Http请求中的keep-alive有了解吗</h2><h2 id="16、网络分层"><a href="#16、网络分层" class="headerlink" title="16、网络分层"></a>16、网络分层</h2><h2 id="17、即时通信，除了Ajax和websocket"><a href="#17、即时通信，除了Ajax和websocket" class="headerlink" title="17、即时通信，除了Ajax和websocket"></a>17、即时通信，除了Ajax和websocket</h2><h2 id="18、模块化，commonJS，es6，cmd，amd"><a href="#18、模块化，commonJS，es6，cmd，amd" class="headerlink" title="18、模块化，commonJS，es6，cmd，amd"></a>18、模块化，commonJS，es6，cmd，amd</h2><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="1、vue解决了什么问题"><a href="#1、vue解决了什么问题" class="headerlink" title="1、vue解决了什么问题"></a>1、vue解决了什么问题</h2><h2 id="2、MVVM的理解"><a href="#2、MVVM的理解" class="headerlink" title="2、MVVM的理解"></a>2、MVVM的理解</h2><h2 id="3、如何实现一个自定义组件，不同组件之间如何通信的？"><a href="#3、如何实现一个自定义组件，不同组件之间如何通信的？" class="headerlink" title="3、如何实现一个自定义组件，不同组件之间如何通信的？"></a>3、如何实现一个自定义组件，不同组件之间如何通信的？</h2><h2 id="4、nextTick"><a href="#4、nextTick" class="headerlink" title="4、nextTick"></a>4、nextTick</h2><h2 id="5、生命周期"><a href="#5、生命周期" class="headerlink" title="5、生命周期"></a>5、生命周期</h2><h2 id="6、虚拟dom的原理"><a href="#6、虚拟dom的原理" class="headerlink" title="6、虚拟dom的原理"></a>6、虚拟dom的原理</h2><h2 id="7、双向绑定的原理？数据劫持？"><a href="#7、双向绑定的原理？数据劫持？" class="headerlink" title="7、双向绑定的原理？数据劫持？"></a>7、双向绑定的原理？数据劫持？</h2><h2 id="8、组件通信"><a href="#8、组件通信" class="headerlink" title="8、组件通信"></a>8、组件通信</h2><p>父-&gt;子</p><p>子-&gt;父</p><p>非父子组件</p><h2 id="9、Proxy-相比于-defineProperty-的优势"><a href="#9、Proxy-相比于-defineProperty-的优势" class="headerlink" title="9、Proxy 相比于 defineProperty 的优势"></a>9、Proxy 相比于 defineProperty 的优势</h2><h2 id="10、watch-computed区别"><a href="#10、watch-computed区别" class="headerlink" title="10、watch computed区别"></a>10、watch computed区别</h2><h2 id="11、virtual-dom-原理实现"><a href="#11、virtual-dom-原理实现" class="headerlink" title="11、virtual dom 原理实现"></a>11、virtual dom 原理实现</h2><h2 id="12、vue-router-hash，-HTML5-新增的-pushState"><a href="#12、vue-router-hash，-HTML5-新增的-pushState" class="headerlink" title="12、vue-router(hash， HTML5 新增的 pushState"></a>12、vue-router(hash， HTML5 新增的 pushState</h2><p>单页应用，如何实现其路由功能—路由原理</p><p>vue-router如何做用户登录权限等</p><p>你在项目中怎么实现路由的嵌套</p><h2 id="13、vuex的理解"><a href="#13、vuex的理解" class="headerlink" title="13、vuex的理解"></a>13、vuex的理解</h2><h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><h2 id="1-页面DOM节点太多，会出现什么问题？如何优化？"><a href="#1-页面DOM节点太多，会出现什么问题？如何优化？" class="headerlink" title="1.页面DOM节点太多，会出现什么问题？如何优化？"></a>1.页面DOM节点太多，会出现什么问题？如何优化？</h2><h2 id="2-如何做性能监测"><a href="#2-如何做性能监测" class="headerlink" title="2.如何做性能监测"></a>2.如何做性能监测</h2><h2 id="3-SEO和语义化"><a href="#3-SEO和语义化" class="headerlink" title="3.SEO和语义化"></a>3.SEO和语义化</h2><h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><h2 id="微信小程序和h5差异，如果有开发weex的经验，可能会加上weex"><a href="#微信小程序和h5差异，如果有开发weex的经验，可能会加上weex" class="headerlink" title="微信小程序和h5差异，如果有开发weex的经验，可能会加上weex"></a>微信小程序和h5差异，如果有开发weex的经验，可能会加上weex</h2><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="一些基本命令"><a href="#一些基本命令" class="headerlink" title="一些基本命令"></a>一些基本命令</h2><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="1、打包原理"><a href="#1、打包原理" class="headerlink" title="1、打包原理"></a>1、打包原理</h2><h2 id="2、打包插件"><a href="#2、打包插件" class="headerlink" title="2、打包插件"></a>2、打包插件</h2><h2 id="3、webpack热更新原理"><a href="#3、webpack热更新原理" class="headerlink" title="3、webpack热更新原理"></a>3、webpack热更新原理</h2><h2 id="4、优化构建速度"><a href="#4、优化构建速度" class="headerlink" title="4、优化构建速度"></a>4、优化构建速度</h2><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="1、排序算法"><a href="#1、排序算法" class="headerlink" title="1、排序算法"></a>1、排序算法</h2><h2 id="2、动态规划，参见背包问题"><a href="#2、动态规划，参见背包问题" class="headerlink" title="2、动态规划，参见背包问题"></a>2、动态规划，参见背包问题</h2><h2 id="3、二叉树"><a href="#3、二叉树" class="headerlink" title="3、二叉树"></a>3、二叉树</h2><h2 id="4、加油站问题-贪心算法"><a href="#4、加油站问题-贪心算法" class="headerlink" title="4、加油站问题(贪心算法)"></a>4、加油站问题(贪心算法)</h2><h2 id="5、二分法"><a href="#5、二分法" class="headerlink" title="5、二分法"></a>5、二分法</h2><h2 id="6、二叉树遍历"><a href="#6、二叉树遍历" class="headerlink" title="6、二叉树遍历"></a>6、二叉树遍历</h2><h2 id="7、单链表反转"><a href="#7、单链表反转" class="headerlink" title="7、单链表反转"></a>7、单链表反转</h2><h2 id="8、取1000个数字里面的质数"><a href="#8、取1000个数字里面的质数" class="headerlink" title="8、取1000个数字里面的质数"></a>8、取1000个数字里面的质数</h2><h2 id="9、找出数组中和为给定值的两个元素，如：-1-2-3-4-5-中找出和为6的两个元素。"><a href="#9、找出数组中和为给定值的两个元素，如：-1-2-3-4-5-中找出和为6的两个元素。" class="headerlink" title="9、找出数组中和为给定值的两个元素，如：[1, 2, 3, 4, 5]中找出和为6的两个元素。"></a>9、找出数组中和为给定值的两个元素，如：[1, 2, 3, 4, 5]中找出和为6的两个元素。</h2><h2 id="10、线性顺序存储结构和链式存储结构有什么区别？以及优缺点"><a href="#10、线性顺序存储结构和链式存储结构有什么区别？以及优缺点" class="headerlink" title="10、线性顺序存储结构和链式存储结构有什么区别？以及优缺点"></a>10、线性顺序存储结构和链式存储结构有什么区别？以及优缺点</h2><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><h2 id="1、自适应"><a href="#1、自适应" class="headerlink" title="1、自适应"></a>1、自适应</h2><h2 id="2、pwa"><a href="#2、pwa" class="headerlink" title="2、pwa"></a>2、pwa</h2><h2 id="3、移动端手势"><a href="#3、移动端手势" class="headerlink" title="3、移动端手势"></a>3、移动端手势</h2><h1 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h1><h2 id="1、无限滚动方案"><a href="#1、无限滚动方案" class="headerlink" title="1、无限滚动方案"></a>1、无限滚动方案</h2><h2 id="2、如何处理兼容性问题"><a href="#2、如何处理兼容性问题" class="headerlink" title="2、如何处理兼容性问题"></a>2、如何处理兼容性问题</h2><h2 id="3、你遇到过最难的问题是什么"><a href="#3、你遇到过最难的问题是什么" class="headerlink" title="3、你遇到过最难的问题是什么"></a>3、你遇到过最难的问题是什么</h2><h2 id="4、ES6-class与ES5-function区别及联系"><a href="#4、ES6-class与ES5-function区别及联系" class="headerlink" title="4、ES6 class与ES5 function区别及联系"></a>4、ES6 class与ES5 function区别及联系</h2><h2 id="5、vue怎么监听数组"><a href="#5、vue怎么监听数组" class="headerlink" title="5、vue怎么监听数组"></a>5、vue怎么监听数组</h2><h2 id="6、写过webpack-loader吗"><a href="#6、写过webpack-loader吗" class="headerlink" title="6、写过webpack loader吗"></a>6、写过webpack loader吗</h2><h2 id="7、微信网页版登录机制思考"><a href="#7、微信网页版登录机制思考" class="headerlink" title="7、微信网页版登录机制思考"></a>7、微信网页版登录机制思考</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this、apply、call、bind</title>
      <link href="/2019/08/21/this-apply-call-bind/"/>
      <url>/2019/08/21/this-apply-call-bind/</url>
      
        <content type="html"><![CDATA[<p>这又是一个面试经典问题<del>/(ㄒoㄒ)/</del>也是 ES5中众多坑中的一个，在 ES6 中可能会极大避免 this 产生的错误，但是为了一些老代码的维护，最好还是了解一下 this 的指向和 call、apply、bind 三者的区别。</p><a id="more"></a><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><p>在 ES5 中，其实 this 的指向，始终坚持一个原理：<strong>this 永远指向最后调用它的那个对象</strong>，来，跟着我朗读三遍：<strong>this 永远指向最后调用它的那个对象，this 永远指向最后调用它的那个对象，this 永远指向最后调用它的那个对象</strong>。记住这句话，this 你已经了解一半了。</p><p>下面我们来看一个最简单的例子：<br>例 1：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Cherry"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// windowsName</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// inner: Window</span>    <span class="token punctuation">}</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"outer:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// outer: Window</span></code></pre><p>这个相信大家都知道为什么 log 的是 windowsName，因为根据刚刚的那句话“<strong>this 永远指向最后调用它的那个对象</strong>”，我们看最后调用 <code>a</code> 的地方 <code>a();</code>，前面没有调用的对象那么就是全局对象 window，这就相当于是 <code>window.a()</code>；注意，这里我们没有使用严格模式，如果使用严格模式的话，全局对象就是 <code>undefined</code>，那么就会报错 <code>Uncaught TypeError: Cannot read property 'name' of undefined</code>。</p><p>再看下这个例子：<br>例 2：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Cherry</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，函数 fn 是对象 a 调用的，所以打印的值就是 a 中的 name 的值。是不是有一点清晰了呢~</p><p>我们做一个小小的改动：<br>例 3：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Cherry</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里打印 Cherry 的原因也是因为刚刚那句话“<strong>this 永远指向最后调用它的那个对象</strong>”，最后调用它的对象仍然是对象 a。</p><p>我们再来看一下这个例子：<br>例 4：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// name: "Cherry",</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// undefined</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里为什么会打印 <code>undefined</code> 呢？这是因为正如刚刚所描述的那样，调用 fn 的是 a 对象，也就是说 fn 的内部的 this 是对象 a，而对象 a 中并没有对 name 进行定义，所以 log 的 <code>this.name</code> 的值是 <code>undefined</code>。</p><p>这个例子还是说明了：<strong>this 永远指向最后调用它的那个对象</strong>，因为最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 <code>this.name</code>，而是直接输出 <code>undefined</code>。</p><p>再来看一个比较坑的例子：<br>例 5：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// name: "Cherry",</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里你可能会有疑问，为什么不是 <code>Cherry</code>，这是因为虽然将 a 对象的 fn 方法赋值给变量 f 了，但是没有调用，再接着跟我念这一句话：“<strong>this 永远指向最后调用它的那个对象</strong>”，由于刚刚的 f 并没有调用，所以 <code>fn()</code> 最后仍然是被 window 调用的。所以 this 指向的也就是 window。</p><p>由以上五个例子我们可以看出，this 的指向并不是在创建的时候就可以确定的，在 es5 中，永远是<strong>this 永远指向最后调用它的那个对象</strong>。</p><p>再来看一个例子：<br>例 6：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span>        <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>读到现在了应该能够理解这是为什么了吧(oﾟ▽ﾟ)o。</p><h2 id="怎么改变-this-的指向"><a href="#怎么改变-this-的指向" class="headerlink" title="怎么改变 this 的指向"></a>怎么改变 this 的指向</h2><p>改变 this 的指向我总结有以下几种方法：</p><ul><li>使用 ES6 的箭头函数</li><li>在函数内部使用 <code>_this = this</code></li><li>使用 <code>apply</code>、<code>call</code>、<code>bind</code></li><li>new 实例化一个对象</li></ul><p>例 7：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// this.func1 is not a function</span></code></pre><p>在不使用箭头函数的情况下，是会报错的，因为最后调用 <code>setTimeout</code> 的对象是 window，但是在 window 中并没有 func1 函数。</p><p>我们在改变 this 指向这一节将把这个例子作为 demo 进行改造。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>众所周知，ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。<strong>箭头函数的 this 始终指向函数定义时的 this，而非执行时。</strong>，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</p><p>例 8 ：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// Cherry</span></code></pre><h3 id="在函数内部使用-this-this"><a href="#在函数内部使用-this-this" class="headerlink" title="在函数内部使用 _this = this"></a>在函数内部使用 <code>_this = this</code></h3><p>如果不使用 ES6，那么这种方式应该是最简单的不会出错的方式了，我们是先将调用这个函数的对象保存在变量 <code>_this</code> 中，然后在函数中都使用这个 <code>_this</code>，这样 <code>_this</code> 就不会改变了。<br>例 9：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                _this<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// Cherry</span></code></pre><p>这个例子中，在 func2 中，首先设置 <code>var _this = this;</code>，这里的 <code>this</code> 是调用 <code>func2</code> 的对象 a，为了防止在 <code>func2</code> 中的 setTimeout 被 window 调用而导致的在 setTimeout 中的 this 为 window。我们将 <code>this(指向变量 a)</code> 赋值给一个变量 <code>_this</code>，这样，在 <code>func2</code> 中我们使用 <code>_this</code> 就是指向对象 a 了。</p><h3 id="使用-apply、call、bind"><a href="#使用-apply、call、bind" class="headerlink" title="使用 apply、call、bind"></a>使用 apply、call、bind</h3><p>使用 apply、call、bind 函数也是可以改变 this 的指向的，原理稍后再讲，我们先来看一下是怎么实现的：</p><h4 id="使用-apply"><a href="#使用-apply" class="headerlink" title="使用 apply"></a>使用 apply</h4><p>例 10：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span></code></pre><h4 id="使用-call"><a href="#使用-call" class="headerlink" title="使用 call"></a>使用 call</h4><p>例 11：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span></code></pre><h4 id="使用-bind"><a href="#使用-bind" class="headerlink" title="使用 bind"></a>使用 bind</h4><p>例 12：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span></code></pre><h2 id="apply、call、bind-区别"><a href="#apply、call、bind-区别" class="headerlink" title="apply、call、bind 区别"></a>apply、call、bind 区别</h2><p>刚刚我们已经介绍了 apply、call、bind 都是可以改变 this 的指向的，但是这三个函数稍有不同。</p><p>在 <a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fapply" target="_blank" rel="noopener">MDN</a> 中定义 apply 如下；</p><blockquote><p>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数</p></blockquote><p>语法：</p><blockquote><p>fun.apply(thisArg, [argsArray])</p></blockquote><ul><li>thisArg：在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。</li><li>argsArray：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为null 或 undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。浏览器兼容性请参阅本文底部内容。</li></ul><h3 id="apply-和-call-的区别"><a href="#apply-和-call-的区别" class="headerlink" title="apply 和 call 的区别"></a>apply 和 call 的区别</h3><p>其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。</p><p>call 的语法为：</p><pre class=" language-js"><code class="language-js">fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</p><p>例 13：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 3</span></code></pre><p>例 14：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 3</span></code></pre><h3 id="bind-和-apply、call-区别"><a href="#bind-和-apply、call-区别" class="headerlink" title="bind 和 apply、call 区别"></a>bind 和 apply、call 区别</h3><p>我们先来将刚刚的例子使用 bind 试一下</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>我们会发现并没有输出，这是为什么呢，我们来看一下 <a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fbind" target="_blank" rel="noopener">MDN</a> 上的文档说明：</p><blockquote><p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p></blockquote><p>所以我们可以看出，bind 是创建一个新的函数，我们必须要手动去调用：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 3</span></code></pre><p>==================================== 更新==============================</p><h2 id="JS-中的函数调用"><a href="#JS-中的函数调用" class="headerlink" title="JS 中的函数调用"></a>JS 中的函数调用</h2><p>看到留言说，很多童靴不理解为什么 例 6 的 innerFunction 和 例 7 的 this 是指向 window 的，所以我就来补充一下 JS 中的函数调用。<br>例 6：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span>        <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>例 7：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// this.func1 is not a function</span></code></pre><p>函数调用的方法一共有 4 种</p><ol><li>作为一个函数调用</li><li>函数作为方法调用</li><li>使用构造函数调用函数</li><li>作为函数方法调用函数（call、apply）</li></ol><h3 id="作为一个函数调用"><a href="#作为一个函数调用" class="headerlink" title="作为一个函数调用"></a>作为一个函数调用</h3><p>比如上面的 例 1：<br>例 1：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Cherry"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// windowsName</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// inner: Window</span>    <span class="token punctuation">}</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"outer:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// outer: Window</span></code></pre><p>这样一个最简单的函数，不属于任何一个对象，就是一个函数，这样的情况在 JavaScript 的在浏览器中的非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined。</p><p>但这是一个全局的函数，很容易产生命名冲突，所以不建议这样使用。</p><h3 id="函数作为方法调用"><a href="#函数作为方法调用" class="headerlink" title="函数作为方法调用"></a>函数作为方法调用</h3><p>所以说更多的情况是将函数作为对象的方法使用。比如例 2：<br>例 2：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Cherry</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里定义一个对象 <code>a</code>，对象 <code>a</code> 有一个属性（<code>name</code>）和一个方法（<code>fn</code>）。</p><p>然后对象 <code>a</code> 通过 <code>.</code> 方法调用了其中的 fn 方法。</p><p>然后我们一直记住的那句话“<strong>this 永远指向最后调用它的那个对象</strong>”，所以在 fn 中的 this 就是指向 a 的。</p><h3 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h3><blockquote><p>如果函数调用前使用了 new 关键字, 则是调用了构造函数。<br>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 构造函数:</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arg1<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName  <span class="token operator">=</span> arg2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This    creates a new object</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myFunction</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">,</span><span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 返回 "Cherry"</span></code></pre><p>这就有要说另一个面试经典问题：new 的过程了，(ಥ_ಥ)<br>这里就简单的来看一下 new 的过程吧：<br>伪代码表示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myFunction</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">,</span><span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">myFunction</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> myFunction<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> myFunction<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"Li"</span><span class="token punctuation">,</span><span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'obj'</span><span class="token operator">?</span> result <span class="token punctuation">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>创建一个空对象 obj;</li><li>将新创建的空对象的隐式原型指向其构造函数的显示原型。</li><li>使用 call 改变 this 的指向</li><li>如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。</li></ol><p>所以我们可以看到，在 new 的过程中，我们是使用 call 改变了 this 的指向。</p><h3 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h3><blockquote><p>在 JavaScript 中, 函数是对象。</p><p>JavaScript 函数有它的属性和方法。<br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身</p><p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。<br>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p></blockquote><p>这个时候我们再来看例 6：<br>例 6：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span>        <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里的 innerFunction() 的调用是不是属于第一种调用方式：作为一个函数调用（它就是作为一个函数调用的，没有挂载在任何对象上，所以对于没有挂载在任何对象上的函数，在非严格模式下 this 就是指向 window 的）</p><p>然后再看一下 例 7：<br>例 7：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>        func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>        func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// this.func1 is not a function</span></code></pre><p>这个简单一点的理解可以理解为“<strong>匿名函数的 this 永远指向 window</strong>”，你可以这样想，还是那句话<strong>this 永远指向最后调用它的那个对象</strong>，那么我们就来找最后调用匿名函数的对象，这就很尴尬了，因为匿名函数名字啊，笑哭，所以我们是没有办法被其他对象调用匿名函数的。所以说 匿名函数的 this 永远指向 window。</p><p>如果这个时候你要问，那匿名函数都是怎么定义的，首先，我们通常写的匿名函数都是自执行的，就是在匿名函数后面加 <code>()</code> 让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用啊，比如例 7 中的 setTimeout。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
